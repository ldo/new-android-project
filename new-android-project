#!/usr/bin/python3
#+
# Wrapper around "android create project" which gives nicer
# defaults for some project settings. First of all, define the
# ANDROID_ROOT environment variable to point to the top-level directory
# where you installed the Android SDK. E.g.
#
#     export ANDROID_ROOT=/path/to/android-sdk-linux_x86
#
# Then invoke this script as follows:
#
#     new-android-project options... path
#
# where path is the project directory (will be created if it doesn't exist)
# and the options (all required unless otherwise stated) are
#
#     --target=api-target
#         specifies the Android API level to build for, e.g.
#         "--target=android-7" for API level 7 (Android 2.1),
#         "--target=android-8" for API level 8 (Android 2.2).
#
#     --main-class=name
#         the fully-qualified name (with package prefix) of the main
#         Activity class. E.g. "--main-class=com.example.TestApp.Main".
#
#     --main-title=title
#         the user-visible title text for the main activity. Spaces
#         and non-letter/digits are allowed. Defaults to the main class name
#         if omitted.
#
#     --project-name=name
#         the name for the generated .apk file.
#
#     --ndk
#         (optional) if specified, then Git exclusions will be added for
#         object files produced by NDK builds. Specify together with
#         --custombuild to enable one-step building of both Java and
#         native code.
#
#     --custombuild
#         (optional) if specified, then build.xml will be customized
#         for easier one-step package signing (with “ant signed”) and
#         installation (with “ant install”). If specified together with
#         --ndk, then “ant compile” will also automatically build the
#         native code, and “ant clean” will also automatically get rid
#         of generated native code.
#
# Google's "android" tool forces the title of the main activity
# to be the same as the class name, but there is no requirement for this.
# It also creates a deeply-nested hierarchy of source subdirectories
# corresponding to the levels of the package prefix, but again, there is
# no need for this.
#
# The script also puts a uses-sdk tag with a minSdkVersion tag
# corresponding to the target API level into the manifest, and creates a
# .gitignore to prevent unneeded stuff going into version control.
#
# The --custombuild option requires that the parent directory contain
# a keystore.properties file. Its contents look like this:
#
#     keystore.path=/home/ldo/my.keystore
#     keystore.alias=my-key
#     keystore.password=please
#
# where keystore.path is the path to your keystore file, keystore.alias
# is the name (alias) of the key in the keystore to use, and
# keystore.password the password for accessing that key. This file is
# symlinked into the project directory to avoid keeping multiple copies
# of it around.
#
# If the parent directory contains a local.properties file which
# defines the sdk.dir property to point to the SDK directory, then
# a symlink to this will be put in place of the local.properties file
# in the project directory. This way, local.properties need only be
# updated in one place if you relocate the SDK. Also, if this file
# exists, its definition of sdk.dir will be used in place of the
# ANDROID_ROOT environment variable, which need not be specified.
#
# Copyright 2011 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you
# may not use this file except in compliance with the License. You may
# obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#-

import sys
import os
import re
import subprocess
import errno
from xml.sax.saxutils import escape as escape_xml
import getopt

android_cmd = "tools/android"
  # relative path to android cmd within SDK root
src_dir = "src"
  # top-level source subdirectory in a new project
manifest_filename = "AndroidManifest.xml"
strings_filename = "res/values/strings.xml"
sdk_props_filename = "local.properties"
keystore_props_filename = "keystore.properties"

class FileReplacer :
    """context manager to handle modifications to files."""

    def __init__(self, filename, description, max_replaced) :
        self.old_filename = filename
        self.new_filename = filename + "-new"
        self.description = description
        self.newfile = None
        self.max_replaced = max_replaced
        self.replaced = 0
    #end _init__

    def open_old(self) :
        """opens the old file for reading."""
        return open(self.old_filename, "r")
    #end open_old

    def __enter__(self) :
        self.newfile = open(self.new_filename, "w")
        return self
    #end __enter__

    def write(self, data) :
        self.newfile.write(data)
    #end def

    def set_replaced(self) :
        """marks that a replacement has successfully occurred. Must
        be called exactly the number of times specified by max_replaced."""
        self.replaced += 1
    #end set_replaced

    def close(self) :
        """closes the new output file and replaces the old file. Call
        this at the end of processing of the file contents. Dies if
        set_replaced was not called the right number of times."""
        self.newfile.flush()
        self.newfile.close()
        self.newfile = None
        if self.replaced != self.max_replaced :
            raise getopt.GetoptError \
              (
                "%s not found in %s" % (self.description, self.old_filename)
              )
        #end if
        os.rename(self.new_filename, self.old_filename)
    #end close

    def __exit__(self, exception_type, exception_value, traceback) :
        if exception_type != None :
            if self.newfile != None :
                self.newfile.close()
            #end if
            try :
                os.unlink(self.new_filename)
            except OSError as failed :
                if failed.errno != errno.ENOENT :
                    raise
                #end if
            #end try
        #end if
    #end __exit__

#end FileReplacer

#+
# Mainline
#-

opts, args = getopt.getopt \
  (
    sys.argv[1:],
    "",
    ["custombuild", "main-class=", "main-title=", "ndk", "project-name=", "target=",]
  )
if len(args) != 1 :
    raise getopt.GetoptError("need exactly one arg, the pathname for the project directory")
#end if
project_dir = args[0]
main_class = None
main_title = None
project_name = None
target = None
ndk_build = False
custom_build = False
for key, val in opts :
    if key == "--custombuild" :
        custom_build = True
    elif key == "--main-class" :
        if main_class != None :
            raise getopt.GetoptError("can only specify one --main-class")
        #end if
        main_class = val
    elif key == "--main-title" :
        if main_title != None :
            raise getopt.GetoptError("can only specify one --main-title")
        #end if
        main_title = val
    elif key == "--ndk" :
        ndk_build = True
    elif key == "--project-name" :
        if project_name != None :
            raise getopt.GetoptError("can only specify one --project-name")
        #end if
        project_name = val
    elif key == "--target" :
        if target != None :
            raise getopt.GetoptError("can only specify one --target")
        #end if
        target = val
    #end if
#end for
if main_class == None or project_name == None or target == None :
    raise getopt.GetoptError("--main-class, --project-name and --target are required")
#end if
package_name, class_name = main_class.rsplit(".", 1)
if main_title == None :
    main_title = main_class
#end if

if os.path.exists(project_dir) and len(os.listdir(project_dir)) != 0 :
  # check for existence rather than isdir because android tool returns success
  # after failing to create project if non-directory with that name already exists
    raise getopt.GetoptError("directory %s exists and is not empty" % project_dir)
#end if

parent_dir = os.path.split(os.path.abspath(project_dir))[0]
android_root = None
parent_sdk_props = os.path.join(parent_dir, sdk_props_filename)
parent_sdk_props_exists = os.path.isfile(parent_sdk_props)
if parent_sdk_props_exists :
    for line in open(parent_sdk_props, "r") :
        if len(line.strip()) != 0 and not line.startswith("#") :
            key, value = line.rstrip("\n").split("=", 1)
            if key == "sdk.dir" :
                android_root = value
                break
            #end if
        #end if
    #end for
#end if
if android_root == None :
    android_root = os.environ.get("ANDROID_ROOT")
    if android_root == None :
        raise getopt.GetoptError \
          (
            "please point ANDROID_ROOT at the root directory of the Android SDK"
          )
    #end if
    if not os.path.isfile(os.path.join(android_root, android_cmd)) :
        raise getopt.GetoptError("can't find android cmd in ANDROID_ROOT")
    #end if
#end if

if custom_build :
    if (
        not os.path.isfile
          (
            os.path.join(parent_dir, keystore_props_filename)
          )
    ) :
        raise getopt.GetoptError("%s must exist in parent dir for custom build" % keystore_props_filename)
    #end if
#end if

status = subprocess.Popen \
  (
    args =
        [
            os.path.join(android_root, android_cmd), "create", "project",
            "--target", target,
            "--package", package_name,
            "--name", project_name,
            "--activity", class_name,
            "--path", project_dir,
        ],
    close_fds = True,
    shell = False,
  ).wait()
if status != 0 :
    raise getopt.GetoptError("android create project returned status %d" % status)
#end if

# move generated source file to top level of src directory
# and delete all its child subdirectories
srcroot = os.path.join(project_dir, src_dir)
for parent, subdirs, subfiles in tuple(os.walk(srcroot)) :
    for file in subfiles :
        fromfile = os.path.join(parent, file)
        tofile = os.path.join(os.path.join(srcroot, file))
        sys.stderr.write("move %s => %s\n" % (fromfile, tofile)) # debug
        os.rename(fromfile, tofile)
    #end for
#end for
deletedir = os.path.join(srcroot, "/".join(package_name.split(".")))
sys.stderr.write("rmdir -p %s\n" % deletedir) # debug
os.removedirs(deletedir)

with \
    FileReplacer(os.path.join(project_dir, strings_filename), "app_name string", 1) \
as \
    strings_file \
:
    for line in strings_file.open_old() :
        match = re.search(r"name=\"app_name\">(.+)</", line)
        if match != None :
            line = line[:match.start(1)] + escape_xml(main_title) + line[match.end(1):]
            strings_file.set_replaced()
        #end if
        strings_file.write(line)
    #end for
    strings_file.close()
#end with

match = re.search(r"^android-(\d+)$", target)
if match != None :
    sdk_version = match.group(1)
    with \
        FileReplacer(os.path.join(project_dir, manifest_filename), "<application> tag", 1) \
    as \
        manifest_file \
    :
        for line in manifest_file.open_old() :
            if line.find("<application") >= 0 :
                manifest_file.write \
                  (
                        "    <uses-sdk\n        android:minSdkVersion=\"%s\"\n    />\n"
                    %
                        sdk_version
                  )
                manifest_file.set_replaced()
            #end if
            manifest_file.write(line)
        #end for
        manifest_file.close()
    #end with
else :
    sys.stderr.write("warning: cannot determine SDK version from target %s\n" % repr(target))
#end if

if custom_build :
    with \
        FileReplacer(os.path.join(project_dir, "build.xml"), "build.xml markers", 2 + 3 * int(ndk_build)) \
    as \
        build_file \
    :
        empty_prebuild = \
            (
                "<target name=\"-pre-build\">",
                "</target>",
            )
        for line in build_file.open_old() :
            after = ""
            if line.find("\"%s\"" % sdk_props_filename) >= 0 :
                after = "    <property file=\"%s\" />\n" % keystore_props_filename
                build_file.set_replaced()
            elif ndk_build and line.find("pre_setup.xml") >= 0 :
                after = \
                    (
                        "\n    <target name=\"clean\" description=\"Removes output files created by other targets.\">\n"
                        "        <delete dir=\"${out.absolute.dir}\" verbose=\"${verbose}\" />\n"
                        "        <delete dir=\"${gen.absolute.dir}\" verbose=\"${verbose}\" />\n"
                        "        <delete dir=\"${native.libs.dir}\" verbose=\"${verbose}\" />\n"
                        "        <delete dir=\"obj\" verbose=\"${verbose}\" />\n"
                        "    </target>\n"
                        "\n"
                        "    <target name=\"-pre-build\">\n"
                        "        <exec executable=\"${ndk.dir}/ndk-build\"/>\n"
                        "    </target>"
                    )
                build_file.set_replaced()
            elif ndk_build and len(empty_prebuild) != 0 and line.find(empty_prebuild[0]) >= 0 :
                empty_prebuild = empty_prebuild[1:]
                line = ""
                build_file.set_replaced()
            elif line.find("<!-- Execute the Android Setup task") >= 0 :
                build_file.write \
                    (
                        "    <target name=\"signed\" depends=\"-package-release\">\n"
                        "        <signjar\n"
                        "            keystore=\"${keystore.path}\" alias=\"${keystore.alias}\" storepass=\"${keystore.password}\"\n"
                        "            jar=\"bin/${out.projname}-unsigned.apk\"\n"
                        "            signedjar=\"bin/${out.projname}-unaligned.apk\"\n"
                        "            verbose=\"true\"\n"
                        "        />\n"
                        "        <exec executable=\"${sdk.dir}/tools/zipalign\">\n"
                        "            <arg value=\"-f\"/>\n"
                        "            <arg value=\"-v\"/>\n"
                        "            <arg value=\"4\"/>\n"
                        "            <arg value=\"bin/${out.projname}-unaligned.apk\"/>\n"
                        "            <arg value=\"bin/${out.projname}.apk\"/>\n"
                        "        </exec>\n"
                        "    </target>\n"
                        "\n"
                        "    <target name=\"install\" depends=\"signed\">\n"
                        "        <exec executable=\"${sdk.dir}/platform-tools/adb\">\n"
                        "            <arg value=\"install\"/>\n"
                        "            <arg value=\"-r\"/>\n"
                        "            <arg value=\"bin/${out.projname}.apk\"/>\n"
                        "        </exec>\n"
                        "    </target>\n"
                        "\n"
                        "    <target name=\"help\">\n"
                        "        <!-- displays starts at col 13\n"
                        "              |13                                                              80| -->\n"
                        "        <echo>Custom Android Ant Build. Available targets:</echo>\n"
                        "        <echo>   help:      Displays this help.</echo>\n"
                        "        <echo>   clean:     Removes output files created by other targets.</echo>\n"
                        "        <echo>   compile:   Compiles project's .java files into .class files.</echo>\n"
                        "        <echo>   release:   Builds the application. The generated apk file must be</echo>\n"
                        "        <echo>              signed before it is published.</echo>\n"
                        "        <echo>   signed:    Builds the application and signs it with your key.</echo>\n"
                        "        <echo>   install:   Installs/reinstalls the signed package onto a running</echo>\n"
                        "        <echo>              emulator or device.</echo>\n"
                        "        <echo>              If the application was previously installed, the</echo>\n"
                        "        <echo>              signatures must match.</echo>\n"
                        "        <echo>   uninstall: Uninstalls the application from a running emulator or</echo>\n"
                        "        <echo>              device.</echo>\n"
                        "    </target>\n"
                        "\n"
                    )
                build_file.set_replaced()
            #end if
            build_file.write(line + after)
        #end for
        build_file.close()
    #end with
    omit = \
        (
            "how the release builds are signed",
            "the following properties:",
            "'key.store'",
            "'key.alias'",
            "password will be asked",
        )
    with \
        FileReplacer(os.path.join(project_dir, "build.properties"), "build props", len(omit)) \
    as \
        props_file \
    :
        for line in props_file.open_old() :
            if len(omit) != 0 :
                if line.find(omit[0]) >= 0 :
                    props_file.set_replaced()
                    line = ""
                    omit = omit[1:]
                    if len(omit) == 0 :
                        props_file.write("out.projname=" + project_name + "\n")
                    #end if
                #end if
            #end if
            props_file.write(line)
        #end for
        props_file.close()
    #end with
    os.symlink \
      (
        "../" + keystore_props_filename,
        os.path.join(project_dir, keystore_props_filename)
      )
#end if
if parent_sdk_props_exists :
    # replace multiple copies of file with symlinks to single copy in parent directory
    os.unlink(os.path.join(project_dir, sdk_props_filename))
    os.symlink \
      (
        "../" + sdk_props_filename,
        os.path.join(project_dir, sdk_props_filename)
      )
#end if

# generate a .gitignore to avoid putting build-generated and Google-recommended files
# under version control
gitignore = open(os.path.join(project_dir, ".gitignore"), "w")
for \
    exclude \
in \
    (
        (
            "/bin/",
            "/gen/",
            "/" + sdk_props_filename,
        )
    +
        (
            (),
            (
                "/obj/",
                "/libs/",
            ),
        )[ndk_build]
    +
        (
            (),
            (
                "/" + keystore_props_filename,
            )
        )[custom_build]
    ) \
:
    gitignore.write(exclude + "\n")
#end for
gitignore.flush()
gitignore.close()
