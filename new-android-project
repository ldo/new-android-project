#!/usr/bin/python3
#+
# Wrapper around "android create project" which gives nicer
# defaults for some project settings. First of all, define the
# ANDROID_ROOT environment variable to point to the top-level directory
# where you installed the Android SDK. E.g.
#
#     export ANDROID_ROOT=/path/to/android-sdk-linux_x86
#
# Then invoke this script as follows:
#
#     new-android-project options... path
#
# where path is the project directory (will be created if it doesn't exist)
# and the options (all required unless otherwise stated) are
#
#     --target=api-target
#         specifies the Android API level to build for, e.g.
#         "--target=android-7" for API level 7 (Android 2.1),
#         "--target=android-8" for API level 8 (Android 2.2).
#
#     --main-class=name
#         the fully-qualified name (with package prefix) of the main
#         Activity class. E.g. "--main-class=com.example.TestApp.Main".
#
#     --main-title=title
#         the user-visible title text for the main activity. Spaces
#         and non-letter/digits are allowed. Defaults to the main class name
#         if omitted.
#
#     --project-name=name
#         the name for the generated .apk file.
#
# Google's "android" tool forces the title of the main activity
# to be the same as the class name, but there is no requirement for this.
# It also creates a deeply-nested hierarchy of source subdirectories
# corresponding to the levels of the package prefix, but again, there is
# no need for this.
#
# The script also puts a uses-sdk tag with a minSdkVersion tag corresponding
# to the target API level into the manifest, and creates a .gitignore to
# prevent unneeded stuff going into version control.
#
# Created by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
#-

import sys
import os
import re
import subprocess
import errno
from xml.sax.saxutils import escape as escape_xml
import getopt

android_cmd = "tools/android"
  # relative path to android cmd within SDK root
src_dir = "src"
  # top-level source subdirectory in a new project
manifest_filename = "AndroidManifest.xml"
strings_filename = "res/values/strings.xml"

class FileReplacer :
    """context manager to handle modifications to files."""

    def __init__(self, filename, description) :
        self.old_filename = filename
        self.new_filename = filename + "-new"
        self.description = description
        self.newfile = None
        self.replaced = False
    #end _init__

    def open_new(self) :
        """opens the new output file under a temporary name. Call this
        exactly once."""
        self.newfile = open(self.new_filename, "w")
        return self.newfile
    #end open_new

    def open_old(self) :
        """opens the old file for reading."""
        return open(self.old_filename, "r")
    #end open_old

    def __enter__(self) :
        return self
    #end __enter__

    def set_replaced(self) :
        """marks that a replacement has successfully occurred. Must
        be called at least once."""
        self.replaced = True
    #end set_replaced

    def close(self) :
        """closes the new output file and replaces the old file. Call
        this exactly one some point after open_new. Dies if set_replaced
        was not called."""
        self.newfile.flush()
        self.newfile.close()
        self.newfile = None
        if not self.replaced :
            raise getopt.GetoptError \
              (
                "%s not found in %s" % (self.description, self.old_filename)
              )
        #end if
        sys.stderr.write("replace %s => %s\n" % (self.new_filename, self.old_filename)) # debug
        os.rename(self.new_filename, self.old_filename)
    #end close

    def __exit__(self, exception_type, exception_value, traceback) :
        if exception_type != None :
            if self.newfile != None :
                self.newfile.close()
            #end if
            try :
                os.unlink(self.new_filename)
            except OSError as failed :
                if failed.errno != errno.ENOENT :
                    raise
                #end if
            #end try
        #end if
    #end __exit__

#end FileReplacer

#+
# Mainline
#-

android_root = os.environ.get("ANDROID_ROOT")
if android_root == None :
    raise getopt.GetoptError("please point ANDROID_ROOT at the root directory of the Android SDK")
#end if
if not os.path.isfile(os.path.join(android_root, android_cmd)) :
    raise getopt.GetoptError("can't find android cmd in ANDROID_ROOT")
#end if

opts, args = getopt.getopt \
  (
    sys.argv[1:],
    "",
    ["main-class=", "main-title=", "project-name=", "target=",]
  )
if len(args) != 1 :
    raise getopt.GetoptError("need exactly one arg, the pathname for the project directory")
#end if
project_dir = args[0]
main_class = None
main_title = None
project_name = None
target = None
for key, val in opts :
    if key == "--main-class" :
        if main_class != None :
            raise getopt.GetoptError("can only specify one --main-class")
        #end if
        main_class = val
    elif key == "--main-title" :
        if main_title != None :
            raise getopt.GetoptError("can only specify one --main-title")
        #end if
        main_title = val
    elif key == "--project-name" :
        if project_name != None :
            raise getopt.GetoptError("can only specify one --project-name")
        #end if
        project_name = val
    elif key == "--target" :
        if target != None :
            raise getopt.GetoptError("can only specify one --target")
        #end if
        target = val
    #end if
#end for
if main_class == None or project_name == None or target == None :
    raise getopt.GetoptError("--main-class, --project-name and --target are required")
#end if
package_name, class_name = main_class.rsplit(".", 1)
if main_title == None :
    main_title = main_class
#end if

if os.path.exists(project_dir) and len(os.listdir(project_dir)) != 0 :
  # check for existence rather than isdir because android tool returns success
  # after failing to create project if non-directory with that name already exists
    raise getopt.GetoptError("directory %s exists and is not empty" % project_dir)
#end if

status = subprocess.Popen \
  (
    args =
        [
            os.path.join(android_root, android_cmd), "create", "project",
            "--target", target,
            "--package", package_name,
            "--name", project_name,
            "--activity", class_name,
            "--path", project_dir,
        ],
    close_fds = True,
    shell = False,
  ).wait()
if status != 0 :
    raise getopt.GetoptError("android create project returned status %d" % status)
#end if

# move generated source file to top level of src directory
# and delete all its child subdirectories
srcroot = os.path.join(project_dir, src_dir)
for parent, subdirs, subfiles in tuple(os.walk(srcroot)) :
    for file in subfiles :
        fromfile = os.path.join(parent, file)
        tofile = os.path.join(os.path.join(srcroot, file))
        sys.stderr.write("move %s => %s\n" % (fromfile, tofile)) # debug
        os.rename(fromfile, tofile)
    #end for
#end for
deletedir = os.path.join(srcroot, "/".join(package_name.split(".")))
sys.stderr.write("rmdir -p %s\n" % deletedir) # debug
os.removedirs(deletedir)

with \
    FileReplacer(os.path.join(project_dir, strings_filename), "app_name string") \
as \
    strings_file \
:
    new_strings = strings_file.open_new()
    for line in strings_file.open_old() :
        match = re.search(r"name=\"app_name\">(.+)</", line)
        if match != None :
            line = line[:match.start(1)] + escape_xml(main_title) + line[match.end(1):]
            strings_file.set_replaced()
        #end if
        new_strings.write(line)
    #end for
    strings_file.close()
#end with

match = re.search(r"^android-(\d+)$", target)
if match != None :
    sdk_version = match.group(1)
    with \
        FileReplacer(os.path.join(project_dir, manifest_filename), "<application> tag") \
    as \
        manifest_file \
    :
        new_manifest = manifest_file.open_new()
        for line in manifest_file.open_old() :
            if line.find("<application") >= 0 :
                new_manifest.write \
                  (
                        "    <uses-sdk\n        android:minSdkVersion=\"%s\"\n    />\n"
                    %
                        sdk_version
                  )
                manifest_file.set_replaced()
            #end if
            new_manifest.write(line)
        #end for
        manifest_file.close()
    #end with
else :
    sys.stderr.write("warning: cannot determine SDK version from target %s\n" % repr(target))
#end if

# generate a .gitignore to avoid putting build-generated and Google-recommended files
# under version control
gitignore = open(os.path.join(project_dir, ".gitignore"), "w")
gitignore.write("/bin/\n")
gitignore.write("/gen/\n")
gitignore.write("/local.properties\n")
gitignore.flush()
gitignore.close()
