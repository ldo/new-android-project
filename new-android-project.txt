Android Project Tips
####################

.. This documentation file is perfectly readable as is. Or you can process it
   through Docutils <http://docutils.sourceforge.net/> to generate an HTML page,
   or whatever.

The `Android SDK <http://developer.android.com/sdk/index.html>`_
will create a project directory structure for you
(using the ``android create project`` command), but some things could be
done better.

Note that the following tips are oriented towards
command-line-oriented builds using a ``build.xml file`` with the Ant
tool. Google also provide an Eclipse plug-in, but GUI tools are never
going to be free of limitations and inflexibilities; the ultimate in
power is always going to reside in the command line.

Main Activity Title
===================

The ``android create project`` command forces the title that appears in
the main activity window to be the same as the main activity class
name (and disallows spaces and other non-alphanumeric characters). But
there is no requirement for this; the title can be any text string.

Application Label vs Activity Label
-----------------------------------

The value of the ``label`` attribute on the
`<activity> <http://developer.android.com/guide/topics/manifest/activity-element.html>`_
tag is the one that shows in the launcher’s scrolling list of
available applications, and is the one that shows when you add an app
shortcut on a home screen. The ``label`` on the
`<application> <http://developer.android.com/guide/topics/manifest/application-element.html>`_
tag is only used when you look to manage installed applications in
your Settings.

Too Many Subdirectories
=======================

Java source files are kept in the ``src/`` subdirectory. The Java
tradition is to create a subdirectory level for each component of the
fully-qualified package name; thus, the source file for a class
``com.example.myproj.Main`` would be in
``src/com/example/myproj/Main.java``. I find this is excessive. And it
turns out the Android build tools don’t care how the directory
hierarchy is laid out underneath ``src/``, they will simply compile every
``*.java`` file they find anywhere under there. So for a small project,
you can just as easily move all your source files to reside directly
within ``src/``. For a larger project, you might group things into
subdirectories say, one level down. But the choice is yours, you don’t
have to be consistent with the package hierarchy names.

Manifest ``minSdkVersion`` vs ``build.xml``/``default.properties`` target
=========================================================================

The ``default.properties`` file referenced from ``build.xml`` defines the
“``target``” property, which specifies the version of the Android API to
use to build your app. In the manifest there is the
`<uses-sdk> <http://developer.android.com/guide/topics/manifest/uses-sdk-element.html>`_ tag,
which specifies “minimum” and “target” Android API versions under
which your app will run.

The two are not automatically kept in sync; it is up to you to manage
them. Does it make sense for the ``target`` to be different from the
``minSdkVersion``?

Native Builds
=============

If you use the NDK to build C/C++ code for your project, it provides
the ``ndk-build`` command to compile that code. Instead of invoking
``ndk-build`` as a separate step, why not include a call to it in your
``build.xml`` file, so a single ``ant compile`` command will compile
everything? You can do this by adding a call to ``ndk-build`` in the
``-pre-build`` target in your ``build.xml``, as follows::

   <target name="-pre-build">
       <exec executable="${ndk.dir}/ndk-build"/>
   </target>

(I define ``ndk.dir`` in my ``local.properties`` to point to the directory
where I have the NDK installed.)

Similarly, it is convenient if ``ant clean`` can delete all
automatically-generated files in a single step, instead of having to
do a separate ``ndk-build clean`` step to get rid of the compiled native
code. Here is how I customize the ``clean`` target in ``build.xml``::

   <target name="clean" description="Removes output files created by other targets.">
       <delete dir="${out.absolute.dir}" verbose="${verbose}" />
       <delete dir="${gen.absolute.dir}" verbose="${verbose}" />
       <delete dir="${native.libs.dir}" verbose="${verbose}" />
       <delete dir="obj" verbose="${verbose}" />
   </target>

Omit Unnecessary Stuff
======================

If you aren’t going to obfuscate your code, you can delete the
automatically-created ``proguard.cfg`` file.

Version Control
---------------

When using the standard Google-provided android project-creation tool,
you will see that it puts a warning at the top of your
``local.properties`` file saying it must not be checked into version
control. Most version control systems offer a way to automatically
ignore such files, so you don’t see them keep turning up every time
you look to commit your changes. For example, with
`Git <http://git-scm.com/>`_, you can put a
list of filename patterns to be ignored in either ``.git/info/exclude`` or
``.gitignore``. The former is your own user-specific configuration file
which is not automatically distributed to others when you push your
repository to a server, while the latter is a source file that you can
(and should) put into version control as part of the source tree. This
way, other people get a copy of this along with the source tree, which
is probably preferable all round.

Here is what I put in my .gitignore files::

    /local.properties
    /gen/
    /bin/

This ignores not only ``local.properties``, but also all generated
``.class`` and package files, and the automatically-generated ``R.java``
file which will be found some way down in the ``gen`` subdirectory.

If you’re building native code with the NDK, it’s also worth adding
the directories containing the object files and generated libraries::

/obj/
/libs/

No point including stuff in the repository which is automatically
generated by the build, anyway. A repository should only include
things generated by actual humans; all else can be automatically
generated as part of the build process. Remember, the fewer manual
steps there are, the less chance to make errors.

One-Step Signing
================

It is easy to customize ``build.xml`` so that a single ``ant signed`` command
will do all the compilation, signing and aligning of the output ``.apk``
file in one step.

The standard Ant build scripts are supposed to allow you to automate
signing packages. However, I had some trouble with this, so I am
currently including explicit ``signjar`` and ``zipalign`` commands in my
``build.xml``. I also add a file called ``keystore.properties`` to my source
directory, which I exclude from version control, because it contains
my keystore password. This defines three custom properties that I use
in the ``signjar`` command::

    keystore.path=keystorename
    keystore.alias=keyalias
    keystore.password=keystorepassword

Then in my ``build.xml``, I include this properties file somewhere
convenient (e.g. just after the inclusion of ``local.properties``)::

    <property file="keystore.properties" />

And then I define a new target called ``signed``, which depends on the
standard ``-package-release`` target, as follows::

    <target name="signed" depends="-package-release">
        <signjar
            keystore="${keystore.path}" alias="${keystore.alias}" storepass="${keystore.password}"
            jar="bin/projname-unsigned.apk"
            signedjar="bin/projname-unaligned.apk"
            verbose="true"
        />
        <exec executable="${sdk.dir}/tools/zipalign">
            <arg value="-f"/>
            <arg value="-v"/>
            <arg value="4"/>
            <arg value="bin/projname-unaligned.apk"/>
            <arg value="bin/projname.apk"/>
        </exec>
    </target>

Now I can just type ::

    ant signed

to automatically invoke the compilation, packaging, signing and aligning steps.
